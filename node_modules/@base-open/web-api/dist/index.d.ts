/**
 * @description blockit通信的包的数据结构
 */
type Formula$1 = string;
type Sort$1 = string;
declare enum IOpenSegmentType$1 {
    Text = "text",
    Url = "url",
    Mention = "mention"
}
declare enum OpenMentionTypeMap$1 {
    User = 0,
    Doc = 1,
    Folder = 2,
    Sheet = 3,
    SheetDoc = 4,
    Chat = 5,
    Bitable = 8,
    Mindnote = 11,
    Box = 12,
    Slide = 15,
    Wiki = 16,
    Docx = 22,
    Bitable_Ind = 108
}
/** mention 类型，区分不同类型的飞书云文档或者飞书用户 */
type OpenMentionType$1 = keyof typeof OpenMentionTypeMap$1;
/** 普通文本 */
type IOpenTextSegment$1 = {
    type: IOpenSegmentType$1.Text;
    text: string;
};
/** 链接 */
type IOpenUrlSegment$1 = {
    type: IOpenSegmentType$1.Url;
    text: string;
    link?: string;
};
/** 多行文本中「飞书云文档链接」或「@飞书成员」的类型 */
interface IOpenMentionSegment$1 {
    type: IOpenSegmentType$1.Mention;
    mentionType: OpenMentionType$1;
    text: string;
    token: string;
}
/** 多行文本中「@飞书成员」的类型 */
interface IOpenUserMentionSegment$1 extends IOpenMentionSegment$1 {
    mentionType: 'User';
    name: string;
    en_name?: string;
}
/** 多行文本中「飞书云文档链接」的类型 */
interface IOpenDocumentMentionSegment$1 extends IOpenMentionSegment$1 {
    mentionType: Exclude<OpenMentionType$1, 'User'>;
    link: string;
}
/** 「多行文本」字段单元格类型 */
type IOpenSegment$1 = IOpenTextSegment$1 | IOpenUrlSegment$1 | IOpenUserMentionSegment$1 | IOpenDocumentMentionSegment$1;
/** 「单向关联」/「双向关联」字段单元格类型 */
type IOpenLink$1 = {
    record_ids: string[];
    table_id: string;
    text: string;
    /** 暂时只支持 "text" */
    type: string;
};
/** 「单选」字段单元格类型 */
type IOpenSingleSelect$1 = {
    id: string;
    text: string;
};
/** 「多选」字段单元格类型 */
type IOpenMultiSelect$1 = IOpenSingleSelect$1[];
/** 「人员」 / 「创建人」 / 「修改人」字段单元格类型 */
type IOpenUser$1 = {
    /** 暂未支持 open_id 转换 */
    id: string;
    name?: string;
    en_name?: string;
    email?: string;
};
/** 「地理位置」字段单元格类型 */
type IOpenLocation$1 = {
    address: string;
    adname: string;
    cityname: string;
    /** 完整地址 */
    full_address: string;
    /** "number,number" */
    location: string;
    /** 简短地址 */
    name: string;
    /** 省 */
    pname: string;
};
/** 「附件」字段单元格类型（多值） */
type IOpenAttachment$1 = {
    name: string;
    size: number;
    type: string;
    token: string;
    timeStamp: number;
};
/** 「日期」/「修改时间」/「创建时间」字段单元格类型，毫秒时间戳 */
type IOpenTimestamp$1 = number;
/** 「数字」字段单元格类型 */
type IOpenNumber$1 = number;
/** 「复选框」字段单元格类型 */
type IOpenCheckbox$1 = boolean;
/** 「自动编号」字段单元格类型 */
type IOpenAutoNumber$1 = string;
/** 「电话号码」字段单元格类型 */
type IOpenPhone$1 = string;
/** 「群字段」字段单元格类型 */
type IOpenGroupChat$1 = {
    id: string;
    name: string;
    avatarUrl: string;
    en_name?: string;
    linkToken?: string;
};
/** 字段单值 */
type IOpenSingleCellValue$1 = IOpenSingleSelect$1 | IOpenUser$1 | IOpenTimestamp$1 | IOpenNumber$1 | IOpenCheckbox$1 | IOpenAutoNumber$1 | IOpenPhone$1 | IOpenLocation$1 | IOpenAttachment$1 | IOpenSegment$1 | IOpenUrlSegment$1 | IOpenGroupChat$1 | IOpenLink$1;
type IOpenFormulaProxyCellValue$1 = IOpenSingleCellValue$1[] | null;
type IOpenFormulaFuncCellValue$1 = IOpenSegment$1[] | number[] | number | string;
/** 公式字段出值结果 */
type IOpenFormulaCellValue$1 = IOpenFormulaProxyCellValue$1 | IOpenFormulaFuncCellValue$1;
/** 单元格联合类型，使用时建议使用 checkers 断言这个类型的数据 */
type IOpenCellValue$1 = null | IOpenSingleSelect$1 | IOpenMultiSelect$1 | IOpenUser$1[] | IOpenTimestamp$1 | IOpenNumber$1 | IOpenCheckbox$1 | IOpenAutoNumber$1 | IOpenPhone$1 | IOpenLocation$1 | IOpenAttachment$1[] | IOpenSegment$1[] | IOpenUrlSegment$1[] | IOpenLink$1 | IOpenGroupChat$1[] | IOpenFormulaCellValue$1;

interface IEventCbCtx$2<DataType = unknown> {
    data: DataType;
}
declare enum WidgetBaseEvent$1 {
    TableAdd = "TableAdd",
    TableDelete = "TableDelete",
    SelectionChange = "SelectionChange",
    PermissionChange = "PermissionChange",
    UploadStatusChange = "UploadStatusChange"
}
declare enum WidgetFieldEvent {
}
declare enum WidgetTableEvent {
    FieldAdd = "FieldAdd",
    FieldDelete = "FieldDelete",
    FieldModify = "FieldModify",
    RecordAdd = "RecordAdd",
    RecordModify = "RecordModify",
    RecordDelete = "RecordDelete"
}
declare enum BridgeEvent$1 {
    DataChange = "DataChange",
    ThemeChange = "ThemeChange"
}

interface Selection$1 {
    baseId: string | null;
    tableId: string | null;
    viewId: string | null;
    fieldId: string | null;
    recordId: string | null;
}

/**
 * copy from bitable-sdk
 */
declare enum FieldType$1 {
    NotSupport = 0,
    Text = 1,
    Number = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    DateTime = 5,
    Checkbox = 7,
    User = 11,
    Phone = 13,
    Url = 15,
    Attachment = 17,
    SingleLink = 18,
    Lookup = 19,
    Formula = 20,
    DuplexLink = 21,
    Location = 22,
    GroupChat = 23,
    Denied = 403,
    /**
     * 引用类型字段，前后端约定用10xx公共前缀开头
     */
    CreatedTime = 1001,
    ModifiedTime = 1002,
    CreatedUser = 1003,
    ModifiedUser = 1004,
    AutoNumber = 1005,
    Barcode = 99001,
    Progress = 99002,
    Currency = 99003,
    Rating = 99004
}
declare enum ViewType$1 {
    NotSupport = 0,
    Grid = 1,
    Kanban = 2,
    Form = 3,
    Gallery = 4,
    Gantt = 5,
    Hierarchy = 6,
    Calendar = 7,
    WidgetView = 100
}
declare enum UploadFileTaskStatus$1 {
    Pending = 1,
    Inflight = 2,
    Success = 3,
    Error = 4,
    Paused = 5
}
type IUploadFileTaskItem$1 = {
    uploadedSize: number;
    name: string;
    status: UploadFileTaskStatus$1;
    progress: number;
    uuid: string;
    token?: string;
    size: number;
    file: File;
};
type IUploadFileTask$1 = {
    list: Array<IUploadFileTaskItem$1>;
};
type IUploadEventData$1 = {
    data: {
        id: string;
        tasks: IUploadFileTask$1;
    };
};
type Locale$1 = 'zh-CN' | 'zh-TW' | 'zh-HK' | 'en-US' | 'ja-JP' | 'fr-FR' | 'hi-IN' | 'id-ID' | 'it-IT' | 'ko-KR' | 'pt-BR' | 'ru-RU' | 'th-TH' | 'vi-VN' | 'de-DE' | 'es-ES';
type Language$1 = 'zh' | 'zh-TW' | 'zh-HK' | 'en' | 'ja' | 'fr' | 'hi' | 'id' | 'it' | 'ko' | 'pt' | 'ru' | 'th' | 'vi' | 'de' | 'es';
/** 定位字段输入方式 **/
declare enum ELocationInputType$1 {
    ONLY_MOBILE = "ONLY_MOBILE",
    NOT_LIMIT = "NOT_LIMIT"
}
declare enum NumberFormatter$1 {
    INTERGER = "0",
    DIGITAL_ROUNDED_1 = "0.0",
    DIGITAL_ROUNDED_2 = "0.00",
    DIGITAL_ROUNDED_3 = "0.000",
    DIGITAL_ROUNDED_4 = "0.0000",
    DIGITAL_THOUSANDS = "#,##0",
    DIGITAL_THOUSANDS_DECIMALS = "#,##0.00",
    PERCENTAGE_ROUNDED = "0%",
    PERCENTAGE = "0.00%"
}
declare enum CurrencyFormatter {
    CYN_ROUNDED = "\u00A5#,##0",
    CYN = "\u00A5#,##0.00",
    DOLLAR_ROUNDED = "$#,##0",
    DOLLAR = "$#,##0.00"
}
declare enum DateFormatter {
    DATE_YMD_WITH_SLASH = "yyyy/MM/dd",
    DATE_TIME = "yyyy/MM/dd HH:mm",
    DATE_YMD_WITH_HYPHEN = "yyyy-MM-dd",
    DATE_TIME_WITH_HYPHEN = "yyyy-MM-dd HH:mm",
    DATE_MD_WITH_HYPHEN = "MM-dd",
    DATE_MMDD_WITH_SLASH = "MM/dd/yyyy",
    DATE_DDMM_WITH_SLASH = "dd/MM/yyyy"
}

declare abstract class ApiModule$1<C extends unknown[]> {
    context: C;
    /** 直接返回 string，不能引用 this，这里会被 register 从 prototype 上调用 */
    abstract getModuleName(): string;
    /**
     * @deprecated
     * 绑定 ApiModule 实例上下文并返回新实例
     *
     * @param context
     * @returns
     */
    withContext(context: C): this;
    /**
     * 获取 ApiModule 上下文
     * @returns
     */
    getContext(): C;
}

type BridgeModuleContext$1 = never[];
declare enum ThemeModeType$1 {
    LIGHT = "LIGHT",
    DARK = "DARK"
}
type ThemeModeCtx$1 = {
    theme: ThemeModeType$1;
};
type HostMeta = {
    origin: string;
};
type GetBitableUrlOptions$1 = Pick<Required<Selection$1>, 'tableId' | 'viewId'> & Pick<Selection$1, 'recordId' | 'fieldId'>;
interface ICommonBridgeModule$1 {
    /** 读取持久化数据 */
    getData(): Promise<unknown>;
    /**
     * 写入持久化数据
     * @param data 可序列化的数据
     */
    setData(data: Record<string, unknown>): Promise<void>;
    /**
     * 生成 bitable 链接
     * @param options tableId, viewId 必选，recordId 可选。recordId 为空时打开表格，不为空时打开卡片。
     */
    getBitableUrl(options: GetBitableUrlOptions$1): Promise<string>;
    getUserId(): Promise<string>;
    getTheme(): Promise<ThemeModeType$1>;
    getLocale(): Promise<Locale$1>;
    getLanguage(): Promise<Language$1>;
    getTenantKey(): Promise<string>;
}
interface ICommonBridgeInner$1 {
    registerBridgeEvent(event: BridgeEvent$1): Promise<void>;
    unregisterBridgeEvent(event: BridgeEvent$1): Promise<void>;
}
interface ICommonBridge$1 extends ICommonBridgeModule$1 {
    onThemeChange(callback: (ev: IEventCbCtx$2<ThemeModeCtx$1>) => void): () => void;
}

/**
 * FieldProperty
 */
/** Base */
type IBaseFieldProperty$1 = object | null;
/** Text Field */
type ITextFieldProperty$1 = IBaseFieldProperty$1;
/** Number Field */
interface INumberFieldProperty$1 {
    formatter?: NumberFormatter$1;
}
/** DateTime Field */
type IDateTimeFieldProperty$1 = IBaseFieldProperty$1;
type ICreatedTimeFieldProperty$1 = IDateTimeFieldProperty$1;
type IModifiedTimeFieldProperty$1 = IDateTimeFieldProperty$1;
/** Select Field */
interface ISelectFieldOption$1 {
    id: string;
    name: string;
    color: number;
}
interface ISelectFieldProperty$1 {
    options: ISelectFieldOption$1[];
}
/** Attachment Field */
type IAttachmentFieldProperty$1 = IBaseFieldProperty$1;
/** Link Field */
interface ICommonLinkFieldProperty$1 {
    tableId: string;
    multiple: boolean;
}
/** 单向关联 Field */
type ISingleLinkFieldProperty$1 = ICommonLinkFieldProperty$1;
/** 双向关联 Field */
type IDuplexLinkFieldProperty$1 = ICommonLinkFieldProperty$1;
/** Checkbox Field */
type ICheckboxProperty$1 = IBaseFieldProperty$1;
/** User Field */
interface IUserFieldProperty$1 {
    multiple?: boolean;
}
/** 创建用户 Field */
type ICreatedUserFieldProperty$1 = IBaseFieldProperty$1;
/** 修改用户 Field */
type IModifiedUserFieldProperty$1 = IBaseFieldProperty$1;
/** 查找应用 Field */
type ILookupFieldProperty$1 = IBaseFieldProperty$1;
/** 公式 Field */
type IFormulaFieldProperty$1 = IBaseFieldProperty$1;
/** 超链接 Field */
type IUrlFieldProperty$1 = IBaseFieldProperty$1;
/** 号码 Field */
type IPhoneFieldProperty$1 = IBaseFieldProperty$1;
/** 位置 Field */
interface ILocationFieldProperty$1 {
    inputType: ELocationInputType$1;
}
/** 群聊 Field */
interface IGroupChatFieldProperty$1 {
    multiple?: boolean;
}
/** 条码 Field */
type IBarCodeFieldProperty$1 = IBaseFieldProperty$1;
/** 进度 Field */
type IProgressFieldProperty$1 = IBaseFieldProperty$1;
/** 货币 Field */
type ICurrencyFieldProperty$1 = IBaseFieldProperty$1;
/** 评分 Field */
type IRatingFieldProperty$1 = IBaseFieldProperty$1;
/** Denied Field */
type IDeniedFieldProperty$1 = IBaseFieldProperty$1;
/** 自动编号 Field */
type IAutoNumberFieldProperty$1 = IBaseFieldProperty$1;
/** NotSupport Field */
type INotSupportFieldProperty$1 = IBaseFieldProperty$1;
type IFieldProperty = ITextFieldProperty$1 | INumberFieldProperty$1 | IDateTimeFieldProperty$1 | ICreatedTimeFieldProperty$1 | IModifiedTimeFieldProperty$1 | ISelectFieldProperty$1 | IAttachmentFieldProperty$1 | ISingleLinkFieldProperty$1 | IDuplexLinkFieldProperty$1 | ICheckboxProperty$1 | IUserFieldProperty$1 | ICreatedUserFieldProperty$1 | IModifiedUserFieldProperty$1 | IFormulaFieldProperty$1 | IUrlFieldProperty$1 | IPhoneFieldProperty$1 | ILocationFieldProperty$1 | IGroupChatFieldProperty$1 | IBarCodeFieldProperty$1 | IProgressFieldProperty$1 | ICurrencyFieldProperty$1 | IRatingFieldProperty$1 | IDeniedFieldProperty$1 | IAutoNumberFieldProperty$1 | INotSupportFieldProperty$1;
/** Field Meta */
interface IBaseFieldMeta$1 {
    id: string;
    type: FieldType$1;
    name: string;
    property: IBaseFieldProperty$1;
}
interface ITextFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Text;
    property: ITextFieldProperty$1;
}
interface INumberFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Number;
    property: INumberFieldProperty$1;
}
interface IDateTimeFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.DateTime;
    property: IDateTimeFieldProperty$1;
}
interface ICreatedTimeFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.CreatedTime;
    property: ICreatedTimeFieldProperty$1;
}
interface IModifiedTimeFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.ModifiedTime;
    property: IModifiedTimeFieldProperty$1;
}
interface ISelectFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.SingleSelect | FieldType$1.MultiSelect;
    property: ISelectFieldProperty$1;
}
interface IAttachmentFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Attachment;
    property: IAttachmentFieldProperty$1;
}
interface ISingleLinkFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.SingleLink;
    property: ISingleLinkFieldProperty$1;
}
interface IDuplexLinkFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.DuplexLink;
    property: IDuplexLinkFieldProperty$1;
}
interface ICheckboxMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Checkbox;
    property: ICheckboxProperty$1;
}
interface IUserFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.User;
    property: IUserFieldProperty$1;
}
interface ICreatedUserFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.CreatedUser;
    property: ICreatedUserFieldProperty$1;
}
interface IModifiedUserFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.ModifiedUser;
    property: IModifiedUserFieldProperty$1;
}
interface IFormulaFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Formula;
    property: IFormulaFieldProperty$1;
}
interface IUrlFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Url;
    property: IUrlFieldProperty$1;
}
interface IPhoneFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Phone;
    property: IPhoneFieldProperty$1;
}
interface ILocationFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Location;
    property: ILocationFieldProperty$1;
}
interface IGroupChatFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.GroupChat;
    property: IGroupChatFieldProperty$1;
}
interface INotSupportFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.NotSupport;
    property: INotSupportFieldProperty$1;
}
interface IAutoNumberFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.AutoNumber;
    property: IAutoNumberFieldProperty$1;
}
interface IBarcodeFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Barcode;
    property: IBarCodeFieldProperty$1;
}
interface IProgressFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Progress;
    property: IProgressFieldProperty$1;
}
interface ICurrencyFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Currency;
    property: ICurrencyFieldProperty$1;
}
interface IRatingFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Rating;
    property: IRatingFieldProperty$1;
}
interface ILookupFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Lookup;
    property: ILookupFieldProperty$1;
}
interface IDeniedFieldMeta$1 extends IBaseFieldMeta$1 {
    type: FieldType$1.Denied;
    property: IDeniedFieldProperty$1;
}
type IFieldMeta$1 = ITextFieldMeta$1 | INumberFieldMeta$1 | IDateTimeFieldMeta$1 | ICreatedTimeFieldMeta$1 | IModifiedTimeFieldMeta$1 | ISelectFieldMeta$1 | IAttachmentFieldMeta$1 | ISingleLinkFieldMeta$1 | IDuplexLinkFieldMeta$1 | ICheckboxMeta$1 | IUserFieldMeta$1 | ICreatedUserFieldMeta$1 | IModifiedUserFieldMeta$1 | IFormulaFieldMeta$1 | IUrlFieldMeta$1 | IPhoneFieldMeta$1 | ILocationFieldMeta$1 | IGroupChatFieldMeta$1 | IAutoNumberFieldMeta$1 | IBarcodeFieldMeta$1 | IProgressFieldMeta$1 | ICurrencyFieldMeta$1 | IRatingFieldMeta$1 | ILookupFieldMeta$1 | IDeniedFieldMeta$1 | INotSupportFieldMeta$1;

/** Field 配置信息，用于 add/setField */
type ITextFieldConfig$1 = Omit<ITextFieldMeta$1, 'id'>;
type INumberFieldConfig$1 = Omit<INumberFieldMeta$1, 'id'>;
type IDateTimeFieldConfig$1 = Omit<IDateTimeFieldMeta$1, 'id'>;
type ICreatedTimeFieldConfig$1 = Omit<ICreatedTimeFieldMeta$1, 'id'>;
type IModifiedTimeFieldConfig$1 = Omit<IModifiedTimeFieldMeta$1, 'id'>;
type ISelectFieldConfig$1 = {
    name: string;
    type: FieldType$1.SingleSelect | FieldType$1.MultiSelect;
    property: {
        options: {
            name?: string;
            id?: string;
            color?: number;
        }[];
    };
};
type IAttachmentFieldConfig$1 = Omit<IAttachmentFieldMeta$1, 'id'>;
type ISingleLinkFieldConfig$1 = Omit<ISingleLinkFieldMeta$1, 'id'>;
type IDuplexLinkFieldConfig$1 = Omit<IDuplexLinkFieldMeta$1, 'id'>;
type ICheckboxConfig$1 = Omit<ICheckboxMeta$1, 'id'>;
type IUserFieldConfig$1 = Omit<IUserFieldMeta$1, 'id'>;
type ICreatedUserFieldConfig$1 = Omit<ICreatedUserFieldMeta$1, 'id'>;
type IModifiedUserFieldConfig$1 = Omit<IModifiedUserFieldMeta$1, 'id'>;
type IFormulaFieldConfig$1 = Omit<IFormulaFieldMeta$1, 'id'>;
type IUrlFieldConfig$1 = Omit<IUrlFieldMeta$1, 'id'>;
type IPhoneFieldConfig$1 = Omit<IPhoneFieldMeta$1, 'id'>;
type ILocationFieldConfig$1 = Omit<ILocationFieldMeta$1, 'id'>;
type IGroupChatFieldConfig$1 = Omit<IGroupChatFieldMeta$1, 'id'>;
type IAutoNumberFieldConfig$1 = Omit<IAutoNumberFieldMeta$1, 'id'>;
type IBarcodeFieldConfig$1 = Omit<IBarcodeFieldMeta$1, 'id'>;
type IProgressFieldConfig$1 = Omit<IProgressFieldMeta$1, 'id'>;
type ICurrencyFieldConfig$1 = Omit<ICurrencyFieldMeta$1, 'id'>;
type IRatingFieldConfig$1 = Omit<IRatingFieldMeta$1, 'id'>;
type ILookupFieldConfig$1 = Omit<ILookupFieldMeta$1, 'id'>;
type IDeniedFieldConfig$1 = Omit<IDeniedFieldMeta$1, 'id'>;
type INotSupportFieldConfig$1 = Omit<INotSupportFieldMeta$1, 'id'>;
type IAddFieldConfig$1 = ITextFieldConfig$1 | INumberFieldConfig$1 | IDateTimeFieldConfig$1 | ICreatedTimeFieldConfig$1 | IModifiedTimeFieldConfig$1 | ISelectFieldConfig$1 | IAttachmentFieldConfig$1 | ISingleLinkFieldConfig$1 | IDuplexLinkFieldConfig$1 | ICheckboxConfig$1 | IUserFieldConfig$1 | ICreatedUserFieldConfig$1 | IModifiedUserFieldConfig$1 | IFormulaFieldConfig$1 | IUrlFieldConfig$1 | IPhoneFieldConfig$1 | ILocationFieldConfig$1 | IGroupChatFieldConfig$1 | IAutoNumberFieldConfig$1 | IBarcodeFieldConfig$1 | IProgressFieldConfig$1 | ICurrencyFieldConfig$1 | IRatingFieldConfig$1 | ILookupFieldConfig$1 | IDeniedFieldConfig$1 | INotSupportFieldConfig$1;
type ISetFieldConfig$1 = Omit<IAddFieldConfig$1, 'type'>;
type IFieldId$1 = string;
type IFieldRes$1 = IFieldId$1;

type IRecordValues$1 = {
    fields: {
        [fieldId: string]: IOpenCellValue$1;
    };
};
type IRecordsValues = IRecordValues$1[];
type RecordId$1 = string;
type IRecordRes$1 = RecordId$1;

type IBaseViewProperty$1 = object;
interface IBaseViewMeta$1 {
    id: string;
    name: string;
    type: ViewType$1;
    property: IBaseViewProperty$1;
}
/** 表格视图配置 */
interface IGridViewProperty$1 extends IBaseViewProperty$1 {
    hierarchyConfig: {
        fieldId: string | undefined;
    };
}
/** 看板视图层级配置 */
type IKanbanViewProperty$1 = IBaseViewProperty$1;
/** 表单视图层级配置 */
type IFormViewProperty$1 = IBaseViewProperty$1;
/** 画册视图层级配置 */
type IGalleryViewProperty$1 = IBaseViewProperty$1;
/** 甘特视图层级配置 */
type IGanttViewProperty$1 = IBaseViewProperty$1;
/** 层级视图层级配置 */
type IHierarchyViewProperty$1 = IBaseViewProperty$1;
/** 日历视图层级配置 */
type ICalendarViewProperty$1 = IBaseViewProperty$1;
/** 插件视图层级配置 */
type IWidgetViewProperty$1 = IBaseViewProperty$1;
interface IGridViewMeta$1 extends IBaseViewMeta$1 {
    property: IGridViewProperty$1;
}
interface IKanbanViewMeta$1 extends IBaseViewMeta$1 {
    property: IKanbanViewProperty$1;
}
interface IFormViewMeta$1 extends IBaseViewMeta$1 {
    property: IFormViewProperty$1;
}
interface IGalleryViewMeta$1 extends IBaseViewMeta$1 {
    property: IGalleryViewProperty$1;
}
interface IGanttViewMeta$1 extends IBaseViewMeta$1 {
    property: IGanttViewProperty$1;
}
interface IHierarchyViewMeta$1 extends IBaseViewMeta$1 {
    property: IHierarchyViewProperty$1;
}
interface ICalendarViewMeta$1 extends IBaseViewMeta$1 {
    property: ICalendarViewProperty$1;
}
interface IWidgetViewMeta$1 extends IBaseViewMeta$1 {
    property: IWidgetViewProperty$1;
}
type IViewMeta$1 = IGridViewMeta$1 | IKanbanViewMeta$1 | IFormViewMeta$1 | IGalleryViewMeta$1 | IGanttViewMeta$1 | IHierarchyViewMeta$1 | ICalendarViewMeta$1 | IWidgetViewMeta$1;

/** [tableId, fieldId] */
type WidgetFieldContext = [string, string];
interface IFieldValue$1 {
    record_id: string;
    value: IOpenCellValue$1;
}
interface IUndefinedFieldValue$1 {
    record_id: undefined;
    value: undefined;
}
interface IWidgetFieldModule$1 {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取字段类型 */
    getType(): Promise<FieldType$1>;
    /** 获取公式代理列类型 */
    getProxyType(): Promise<FieldType$1 | void>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(recordId: string): Promise<string>;
    /** 获取当前 field meta 信息 */
    getMeta(): Promise<IFieldMeta$1>;
    /**
     * 获取整列 cellValue
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     */
    getFieldValueList(filter?: Formula$1, sort?: Sort$1): Promise<(IFieldValue$1 | IUndefinedFieldValue$1)[]>;
}
interface IWidgetFieldInner {
    /**
     * 注册 field 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerFieldEvent(event: WidgetFieldEvent): Promise<void>;
    /**
     * 取消注册 field 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterFieldEvent(event: WidgetFieldEvent): Promise<void>;
}
interface IWidgetField$1 extends IWidgetFieldModule$1 {
    id: string;
    tableId: string;
}

/** [tableId, viewId] */
type WidgetViewContext = [string, string];
interface IWidgetViewModule$1 {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取视图类型 */
    getType(): Promise<ViewType$1>;
    /** 获取视图元数据 */
    getMeta(): Promise<IViewMeta$1>;
    /** 获取字段列表（有序） */
    getFieldMetaList(): Promise<IFieldMeta$1[]>;
    /** 获取记录 ID 列表 */
    getVisibleRecordIdList(): Promise<(string | undefined)[]>;
    /** 获取可见字段 ID 列表 */
    getVisibleFieldIdList(): Promise<string[]>;
    /** 获取指定记录的子记录 id 列表, undefined 则表示该记录无子记录 */
    getChildRecordIdList(parentRecordId: string): Promise<RecordId$1[] | undefined>;
}
interface IWidgetViewInner {
}
interface IWidgetView$1 extends IWidgetViewModule$1 {
    id: string;
    tableId: string;
}

/** [tableId] */
type WidgetTableContext = [string];
interface IWidgetTableModule$1 {
    /** 获取表名 */
    getName(): Promise<string>;
    /** 添加字段 */
    addField(fieldConfig: IAddFieldConfig$1): Promise<IFieldRes$1>;
    /** 删除字段 */
    deleteField(fieldId: string): Promise<boolean>;
    /** 修改字段 */
    setField(fieldId: string, fieldConfig: ISetFieldConfig$1): Promise<IFieldRes$1>;
    /** 获取某个 field 元信息 */
    getFieldMetaById(fieldId: string): Promise<IFieldMeta$1>;
    /** 获取所有 field 元信息 */
    getFieldMetaList(): Promise<IFieldMeta$1[]>;
    /** 字段是否存在 */
    isFieldExist(fieldId: string): Promise<boolean>;
    /** 获取某个视图元信息 */
    getViewMetaById(viewId: string): Promise<IViewMeta$1>;
    /** 获取所有 视图 元信息 */
    getViewMetaList(): Promise<IViewMeta$1[]>;
    /** 视图是否存在 */
    isViewExist(viewId: string): Promise<boolean>;
    /** 通过 recordId 获取指定记录 */
    getRecordById(recordId: string): Promise<IRecordValues$1>;
    /**
     * 获取表中所有记录 Id
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     * @returns
     */
    getRecordIdList(filter?: Formula$1, sort?: Sort$1): Promise<(string | undefined)[]>;
    /**
     * 获取单元格值
     * @param fieldId
     * @param recordId
     */
    getCellValue(fieldId: string, recordId: string): Promise<IOpenCellValue$1>;
    /**
     * 设置单元格的值
     * @param fieldId
     * @param recordId
     * @param cellValue
     */
    setCellValue<T extends IOpenCellValue$1 = IOpenCellValue$1>(fieldId: string, recordId: string, cellValue: T): Promise<boolean>;
    /**
     * 获取 attachment 的 url
     * @param token
     * @param fieldId
     * @param recordId
     */
    getAttachmentUrl(token: string, fieldId?: string, recordId?: string): Promise<string>;
    /**
     * 批量获取指定单元格中的附件 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellAttachmentUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 批量获取指定单元格中的附件缩略图 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellThumbnailUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 增加一条记录
     * @param recordValues
     */
    addRecord(recordValues?: IRecordValues$1): Promise<IRecordRes$1>;
    /**
     * 修改一条记录
     * @param recordId
     * @param recordValues
     */
    setRecord(recordId: string, recordValues?: IRecordValues$1): Promise<IRecordRes$1>;
    /**
     * 删除一条记录
     * @param recordId
     */
    deleteRecord(recordId: string): Promise<boolean>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(fieldId: string, recordId: string): Promise<string>;
}
interface IWidgetTableInner {
    /**
     * 通过字段名获取字段 id
     * @param name
     */
    getFieldIdByName(name: string): Promise<string>;
    /**
     * 注册 table 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerTableEvent(event: WidgetTableEvent): Promise<void>;
    /**
     * 取消注册 table 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterTableEvent(event: WidgetTableEvent): Promise<void>;
}
interface IWidgetTable$1 extends IWidgetTableModule$1 {
    id: string;
    /** 获取字段列表 */
    getFieldList(): Promise<IWidgetField$1[]>;
    /**
     * @deprecated The method will be removed, use getFieldMetaList instead!
     */
    getFieldIdList(): Promise<string[]>;
    /**
     * 根据字段 id 获取字段
     * @param fieldId
     */
    getFieldById(fieldId: string): Promise<IWidgetField$1>;
    /**
     * 根据字段名称获取字段
     * @param name
     */
    getFieldByName(name: string): Promise<IWidgetField$1>;
    /**
     * 监听 Field 添加事件
     * @param callback 回调函数
     */
    onFieldAdd(callback: (ev: IEventCbCtx$2) => void): () => void;
    /**
     * 监听 Field 删除事件
     * @param callback 回调函数
     */
    onFieldDelete(callback: (ev: IEventCbCtx$2) => void): () => void;
    /**
     * 监听 Field 修改事件
     * @param callback 回调函数
     */
    onFieldModify(callback: (ev: IEventCbCtx$2) => void): () => void;
    /**
     * 监听 Record 添加事件
     * @param callback 回调函数
     */
    onRecordAdd(callback: (ev: IEventCbCtx$2<[recordId: string]>) => void): () => void;
    /**
     * 监听 Record 删除事件
     * @param callback 回调函数
     */
    onRecordDelete(callback: (ev: IEventCbCtx$2<[recordId: string]>) => void): () => void;
    /**
     * 监听 Record 修改事件
     * @param callback 回调函数
     */
    onRecordModify(callback: (ev: IEventCbCtx$2<{
        recordId: string;
        fieldIds: string[];
    }>) => void): () => void;
    /**
     * 根据字段 id 获取视图
     * @param viewId
     */
    getViewById(viewId: string): Promise<IWidgetView$1>;
}

declare enum PermissionEntity$1 {
    Base = "Base",
    Table = "Table",
    Record = "Record",
    Field = "Field",
    Cell = "Cell"
}
declare enum OperationType$1 {
    Visible = "visible",
    Editable = "editable",
    Addable = "addable",
    Deletable = "deletable",
    Copyable = "copyable",
    Movable = "movable",
    Printable = "printable",
    Manageable = "manageable",
    Submittable = "submittable"
}
type BaseOperation$1 = OperationType$1.Editable | OperationType$1.Manageable | OperationType$1.Copyable | OperationType$1.Printable;
type TableOperation$1 = OperationType$1.Addable | OperationType$1.Deletable | OperationType$1.Editable | OperationType$1.Visible | OperationType$1.Movable | OperationType$1.Copyable;
type RecordOperation$1 = TableOperation$1;
type FieldOperation$1 = TableOperation$1 | OperationType$1.Submittable;
type CellOperation$1 = TableOperation$1;
interface BasePermissionParams$1 {
    entity: PermissionEntity$1.Base;
    type: BaseOperation$1;
}
interface TablePermissionParams$1 {
    entity: PermissionEntity$1.Table;
    param: {
        tableId?: string;
    };
    type: TableOperation$1;
}
interface RecordPermissionParams$1 {
    entity: PermissionEntity$1.Record;
    param: {
        tableId: string;
        recordId?: string;
    };
    type: RecordOperation$1;
}
interface FieldPermissionParams$1 {
    entity: PermissionEntity$1.Field;
    param: {
        tableId: string;
        fieldId?: string;
    };
    type: FieldOperation$1;
}
interface CellPermissionParams$1 {
    entity: PermissionEntity$1.Cell;
    param: {
        tableId: string;
        recordId?: string;
        fieldId?: string;
    };
    type: CellOperation$1;
}
type GetPermissionParams$1 = BasePermissionParams$1 | TablePermissionParams$1 | RecordPermissionParams$1 | FieldPermissionParams$1 | CellPermissionParams$1;

type WidgetBaseContext$1 = never[];
type TableMeta$1 = {
    id: string;
    name: string;
};
interface ICommonWidgetBaseModule$1 {
    /** 读取当前 table id, field id(仅 itemview 会返回), recordId(仅 itemview 会返回) */
    getSelection(): Promise<Selection$1>;
    /** 获取当前 base 下所有表元信息 */
    getTableMetaList(): Promise<TableMeta$1[]>;
    /**
     * 获取 Base、Table、Field、Record、Cell 等不同实体的权限
     */
    getPermission(params: GetPermissionParams$1): Promise<boolean>;
    /**
     * @deprecated 请使用 getPermission 方法
     * 获取当前 base 的权限信息
     * @param type 权限类型，目前支持管理/编辑/复制/打印权限的判断
     */
    getBasePermission(type: BaseOperation$1): Promise<boolean>;
    /**
     * 是否在编辑模式
     */
    isEditable(): Promise<boolean>;
    /**
     * @deprecated 推荐使用 batchUploadFile 方法
     * 上传文件，返回上传任务的 taskId
     * @param file
     * @return taskId
     */
    uploadFile(file: File | FileList): Promise<string>;
    /**
     * 批量上传文件，按序返回每个文件对应的 fileToken 列表
     * @param {(File[] | FileList)} files
     * @return {Promise<string[]>} fileTokens
     */
    batchUploadFile(file: File[] | FileList): Promise<string[]>;
}
interface ICommonWidgetBaseInner$1 {
    /**
     * 当前表是否存在
     */
    isTableExist(tableId: string): Promise<boolean>;
    /**
     * 通过表名获取表 id
     * @param name
     */
    getTableIdByName(name: string): Promise<string>;
    /**
     * 注册 base 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerBaseEvent(event: WidgetBaseEvent$1): Promise<void>;
    /**
     * 取消注册 base 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterBaseEvent(event: WidgetBaseEvent$1): Promise<void>;
}
interface ICommonWidgetBase$1 extends ICommonWidgetBaseModule$1 {
    /** 获取当前 base 下所有表 */
    getTableList(): Promise<IWidgetTable$1[]>;
    /**
     * 通过表 id 获取表
     * @param tableId
     */
    getTableById(tableId: string): Promise<IWidgetTable$1>;
    /**
     * 通过表名获取表
     * @param name
     */
    getTableByName(name: string): Promise<IWidgetTable$1>;
    /**
     * 监听 Table 添加事件
     * @param callback 回调函数
     */
    onTableAdd(callback: (e: IEventCbCtx$2) => void): () => void;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableDelete(callback: (e: IEventCbCtx$2) => void): () => void;
    /**
     * 监听选中改变事件
     * @param callback 回调函数，参数为当前选中的 base/table/field/record ID 集合
     */
    onSelectionChange(callback: (e: IEventCbCtx$2<Selection$1>) => void): () => void;
    /**
     * 监听权限变化
     * @param callback 回调函数
     */
    onPermissionChange(callback: () => void): () => void;
    /**
     * 监听上传文件的状态变化
     * @param callback
     */
    onUploadStatusChange(callback: (data: IUploadEventData$1) => void): () => void;
}

/**
 * 私有 API 模块
 */
interface IPrivateModule {
    /**
     * 设置 client 版本
     * @param version
     */
    setClientVersion(version: string): Promise<void>;
}

/**
 * 调试接口的时候可能看到 c 和 p 比较迷惑，这里主要是为了节省传输开销
 * 在 10000 行 getCellValue 测试中，使用短名称优化可以提高 2% 的性能
 */
interface TransferType {
    /**
     * 指 context，为了节省传输开销所以用 c 简写
     *
     * 推荐使用数组，暂时为了风格统一强制指定为数组
     */
    c: unknown[];
    /**
     * 指 params ，为了节省传输开销所以用 p 简写，参数会被直接 apply 给 host 上的函数
     */
    p: unknown[];
}

declare const baseEventPrefix = "BaseEvent";
declare const tableEventPrefix = "TableEvent";
declare const fieldEventPrefix = "FieldEvent";
declare const bridgeEventPrefix = "BridgeEvent";
declare const getBaseEventKey: (eventName: WidgetBaseEvent$1) => string;
declare const getTableEventKey: (tableId: string, eventName: WidgetTableEvent) => string;
declare const getFieldEventKey: (tableId: string, fieldId: string, eventName: WidgetFieldEvent) => string;
declare const getBridgeEventKey: (eventName: BridgeEvent$1) => string;

declare function createApiKey(moduleName: string, methodName: string): string;
declare function createCompatibleApiKey(moduleName: string, methodName: string): string;
declare function getNeedTransformApiKeyMap(): {
    WidgetBase_getBasePermission: string;
    WidgetBase_registerBaseEvent: string;
    WidgetBase_getSelection: string;
    WidgetBase_isTableExist: string;
    WidgetTable_getCellValue: string;
    WidgetBase_getTableMetaList: string;
    WidgetTable_getName: string;
    WidgetTable_isFieldExist: string;
    WidgetField_getName: string;
    WidgetTable_isViewExist: string;
    WidgetView_getName: string;
    WidgetBase_getTableIdByName: string;
    WidgetBase_isEditable: string;
    WidgetBase_unregisterBaseEvent: string;
    WidgetBase_uploadFile: string;
    WidgetTable_getFieldMetaById: string;
    WidgetTable_getFieldMetaList: string;
    WidgetTable_getViewMetaById: string;
    WidgetTable_getViewMetaList: string;
    WidgetTable_getFieldIdByName: string;
    WidgetTable_getRecordIdList: string;
    WidgetTable_setCellValue: string;
    WidgetTable_addRecord: string;
    WidgetTable_setRecord: string;
    WidgetTable_deleteRecord: string;
    WidgetTable_registerTableEvent: string;
    WidgetTable_unregisterTableEvent: string;
    WidgetTable_getAttachmentUrl: string;
    WidgetField_getType: string;
    WidgetField_getMeta: string;
    WidgetField_getProxyType: string;
    WidgetField_getFieldValueList: string;
    WidgetField_registerFieldEvent: string;
    WidgetField_unregisterFieldEvent: string;
    WidgetView_getType: string;
    WidgetView_getFieldMetaList: string;
    WidgetView_getVisibleRecordIdList: string;
    WidgetBase_getTableList: string;
    WidgetBase_getTableById: string;
    WidgetBase_onTableAdd: string;
    WidgetBase_onTableDelete: string;
    WidgetBase_onSelectionChange: string;
    WidgetBase_onUploadStatusChange: string;
    WidgetTable_getFieldList: string;
    WidgetTable_getFieldById: string;
    WidgetTable_getViewById: string;
    WidgetTable_onFieldAdd: string;
    WidgetTable_onFieldDelete: string;
    WidgetTable_onFieldModify: string;
    WidgetTable_onRecordModify: string;
    WidgetTable_getCellAttachmentUrls: string;
};

declare function isUsers(value: unknown): value is IOpenUser$1[];
declare function isLocation(value: unknown): value is IOpenLocation$1;
declare function isAttachments(value: unknown): value is IOpenAttachment$1[];
declare function isTimestamp(value: unknown): value is IOpenTimestamp$1;
declare function isCheckbox(value: unknown): value is IOpenCheckbox$1;
declare function isPhone(value: unknown): value is IOpenPhone$1;
declare function isAutoNumber(value: unknown): value is IOpenAutoNumber$1;
declare function isNumber(value: unknown): value is IOpenNumber$1;
declare function isSingleSelect(value: unknown): value is IOpenSingleSelect$1;
declare function isMultiSelect(value: unknown): value is IOpenMultiSelect$1;
declare function isEmpty(value: unknown): value is null;
declare function isSegments(value: unknown): value is IOpenSegment$1[];
declare function isLink(value: unknown): value is IOpenLink$1;
declare function isGroupChat(value: unknown): value is IOpenGroupChat$1;

declare const cell_checkers_isUsers: typeof isUsers;
declare const cell_checkers_isLocation: typeof isLocation;
declare const cell_checkers_isAttachments: typeof isAttachments;
declare const cell_checkers_isTimestamp: typeof isTimestamp;
declare const cell_checkers_isCheckbox: typeof isCheckbox;
declare const cell_checkers_isPhone: typeof isPhone;
declare const cell_checkers_isAutoNumber: typeof isAutoNumber;
declare const cell_checkers_isNumber: typeof isNumber;
declare const cell_checkers_isSingleSelect: typeof isSingleSelect;
declare const cell_checkers_isMultiSelect: typeof isMultiSelect;
declare const cell_checkers_isEmpty: typeof isEmpty;
declare const cell_checkers_isSegments: typeof isSegments;
declare const cell_checkers_isLink: typeof isLink;
declare const cell_checkers_isGroupChat: typeof isGroupChat;
declare namespace cell_checkers {
  export {
    cell_checkers_isUsers as isUsers,
    cell_checkers_isLocation as isLocation,
    cell_checkers_isAttachments as isAttachments,
    cell_checkers_isTimestamp as isTimestamp,
    cell_checkers_isCheckbox as isCheckbox,
    cell_checkers_isPhone as isPhone,
    cell_checkers_isAutoNumber as isAutoNumber,
    cell_checkers_isNumber as isNumber,
    cell_checkers_isSingleSelect as isSingleSelect,
    cell_checkers_isMultiSelect as isMultiSelect,
    cell_checkers_isEmpty as isEmpty,
    cell_checkers_isSegments as isSegments,
    cell_checkers_isLink as isLink,
    cell_checkers_isGroupChat as isGroupChat,
  };
}

/************************
 * Bitable 高位域（ab）码 *
 ************************/
declare const UnknownScopeCode = 0;
/**
 * 核心域点位
 * 10：未知
 */
declare const CoreScopeCode: {
    readonly Unknown: 10;
    readonly Base: 11;
    readonly Table: 12;
    readonly Field: 13;
    readonly Record: 14;
    readonly View: 15;
    readonly Cell: 16;
};
/**
 * 开放域点位
 * 80-89：FaaS 点位
 * 90-98：Widget 点位
 * 99：未知点位
 */
declare const OpenScopeCode: {
    readonly Action: 89;
    readonly ViewWidget: 96;
    readonly ItemWidget: 97;
    readonly Widget: 98;
    readonly Unknown: 99;
};
type ValueOf<T> = T[keyof T];
type CoreScopeCodeType = ValueOf<typeof CoreScopeCode>;
type OpenScopeCodeType = ValueOf<typeof OpenScopeCode>;
type ErrorScopeCodeType = typeof UnknownScopeCode | CoreScopeCodeType | OpenScopeCodeType;
/************************
 * Bitable 低位域（xyz）码 *
 ************************/
/**
 * Bitable 核心域通用错误
 */
declare const CoreCommonDetailCode: {
    /** 超出下限 */
    readonly LowerLimitExceeded: 993;
    /** 超出上限 */
    readonly UpperLimitExceeded: 994;
    /** 命名重复 */
    readonly NameRepeated: 995;
    /** 不支持的操作，常见于对旧版本操作 */
    readonly NotSupported: 998;
    /** 权限拒绝 */
    readonly PermissionDenied: 997;
    /** 不存在 */
    readonly NotFound: 998;
    /** 未知错误 */
    readonly Unknown: 999;
};
/**
 * Bitable 开放域通用错误码
 */
declare const OpenCommonDetailCode: {
    /** Host 未注册 API */
    readonly HostNotRegistered: 997;
    /** 不存在 */
    readonly NotFound: 998;
    /** 未知错误 */
    readonly Unknown: 999;
};
/**
 * Bitable 低位（xyz）详情错误码
 */
declare const DetailCode: {
    readonly 11: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 12: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
        /** 数据表未加载完毕 */
        readonly NotLoaded: 1;
    };
    readonly 13: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
        /** 字段类型不匹配 */
        readonly NotMatch: 1;
    };
    readonly 14: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 16: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 15: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 97: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 89: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 96: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
};
/**
 * 自定义错误信息
 */
declare const DetailMessage: {
    [scopeCode in ErrorScopeCodeType]?: {
        [detailCode: number]: string;
    };
};
/** 错误码 */
declare enum OpenErrorCode {
    /** table */
    TableNotFoundError = 10212998,
    TablePermissionDeniedError = 10212997,
    TableNotLoadedError = 10212001,
    /** view */
    ViewNotFoundError = 10215998,
    ViewPermissionDeniedError = 10215997,
    /** field */
    FieldNotFoundError = 10213998,
    FieldPermissionDeniedError = 10213997,
    FieldUnknownError = 10213999,
    /** record */
    RecordNotFoundError = 10214998,
    RecordPermissionDeniedError = 10214997,
    RecordUnknownError = 10214999,
    /** cell */
    CellPermissionDeniedError = 10216997,
    CellUnknownError = 10216999
}

declare const BitableTransferableErrorSign = "bte";
interface TransferableError {
    e: typeof BitableTransferableErrorSign;
    /**
     * @deprecated
     */
    msg: string;
    code: number;
    message: string;
}

declare class OpenError extends Error {
    readonly code: number;
    constructor(scopeCode: ErrorScopeCodeType, detailCode: number, message?: string);
    toJSON(): TransferableError;
}

/**
 * 表不存在
 */
declare class TableNotFoundError extends OpenError {
    constructor();
}
/**
 * 表未加载完毕
 */
declare class TableNotLoadedError extends OpenError {
    constructor();
}
/**
 * 表相关操作无权限
 */
declare class TablePermissionDeniedError extends OpenError {
    constructor();
}

/**
 * 字段不存在
 */
declare class FieldNotFoundError extends OpenError {
    constructor();
}
declare class FieldPermissionDeniedError extends OpenError {
    constructor();
}
declare class SetFieldUnknownError extends OpenError {
    constructor();
}
declare class AddFieldUnknownError extends OpenError {
    constructor();
}
declare class DeleteFieldUnknownError extends OpenError {
    constructor();
}

/** record error */
/**
 * 记录不存在
 */
declare class RecordNotFoundError extends OpenError {
    constructor();
}
/**
 * 记录相关操作无权限
 */
declare class RecordPermissionDeniedError extends OpenError {
    constructor();
}
declare class SetRecordUnknownError extends OpenError {
    constructor();
}
declare class AddRecordUnknownError extends OpenError {
    constructor();
}
declare class DeleteRecordUnknownError extends OpenError {
    constructor();
}

/** view error */
/**
 * 视图不存在
 */
declare class ViewNotFoundError extends OpenError {
    constructor();
}
/**
 * 视图相关操作无权限
 */
declare class ViewPermissionDeniedError extends OpenError {
    constructor();
}

/**
 * 单元格无相关操作权限
 */
declare class CellPermissionDeniedError extends OpenError {
    constructor();
}
declare class SetCellUnknownError extends OpenError {
    constructor();
}

type IBridge = ICommonBridge$1;
type IBridgeModule = ICommonBridgeModule$1;
type IBridgeInner = ICommonBridgeInner$1;

interface IWidgetBaseModule extends ICommonWidgetBaseModule$1 {
    getPersonalBaseToken(): Promise<string>;
}
interface IWidgetBase extends ICommonWidgetBase$1, IWidgetBaseModule {
}
type IWidgetBaseInner = ICommonWidgetBaseInner$1;

declare global {
    const PACKAGE_VERSION: string;
}
declare class BitableApp {
    /** bitable base */
    readonly base: IWidgetBase;
    /** open platform api */
    readonly bridge: ICommonBridge$1;
}
declare const bitable: BitableApp;

/**
 * @description blockit通信的包的数据结构
 */
type Formula = string;
type Sort = string;
declare enum IOpenSegmentType {
    Text = "text",
    Url = "url",
    Mention = "mention"
}
declare enum OpenMentionTypeMap {
    User = 0,
    Doc = 1,
    Folder = 2,
    Sheet = 3,
    SheetDoc = 4,
    Chat = 5,
    Bitable = 8,
    Mindnote = 11,
    Box = 12,
    Slide = 15,
    Wiki = 16,
    Docx = 22,
    Bitable_Ind = 108
}
/** mention 类型，区分不同类型的飞书云文档或者飞书用户 */
type OpenMentionType = keyof typeof OpenMentionTypeMap;
/** 普通文本 */
type IOpenTextSegment = {
    type: IOpenSegmentType.Text;
    text: string;
};
/** 链接 */
type IOpenUrlSegment = {
    type: IOpenSegmentType.Url;
    text: string;
    link?: string;
};
/** 多行文本中「飞书云文档链接」或「@飞书成员」的类型 */
interface IOpenMentionSegment {
    type: IOpenSegmentType.Mention;
    mentionType: OpenMentionType;
    text: string;
    token: string;
}
/** 多行文本中「@飞书成员」的类型 */
interface IOpenUserMentionSegment extends IOpenMentionSegment {
    mentionType: 'User';
    name: string;
    en_name?: string;
}
/** 多行文本中「飞书云文档链接」的类型 */
interface IOpenDocumentMentionSegment extends IOpenMentionSegment {
    mentionType: Exclude<OpenMentionType, 'User'>;
    link: string;
}
/** 「多行文本」字段单元格类型 */
type IOpenSegment = IOpenTextSegment | IOpenUrlSegment | IOpenUserMentionSegment | IOpenDocumentMentionSegment;
/** 「单向关联」/「双向关联」字段单元格类型 */
type IOpenLink = {
    record_ids: string[];
    table_id: string;
    text: string;
    /** 暂时只支持 "text" */
    type: string;
};
/** 「单选」字段单元格类型 */
type IOpenSingleSelect = {
    id: string;
    text: string;
};
/** 「多选」字段单元格类型 */
type IOpenMultiSelect = IOpenSingleSelect[];
/** 「人员」 / 「创建人」 / 「修改人」字段单元格类型 */
type IOpenUser = {
    /** 暂未支持 open_id 转换 */
    id: string;
    name?: string;
    en_name?: string;
    email?: string;
};
/** 「地理位置」字段单元格类型 */
type IOpenLocation = {
    address: string;
    adname: string;
    cityname: string;
    /** 完整地址 */
    full_address: string;
    /** "number,number" */
    location: string;
    /** 简短地址 */
    name: string;
    /** 省 */
    pname: string;
};
/** 「附件」字段单元格类型（多值） */
type IOpenAttachment = {
    name: string;
    size: number;
    type: string;
    token: string;
    timeStamp: number;
};
/** 「日期」/「修改时间」/「创建时间」字段单元格类型，毫秒时间戳 */
type IOpenTimestamp = number;
/** 「数字」字段单元格类型 */
type IOpenNumber = number;
/** 「复选框」字段单元格类型 */
type IOpenCheckbox = boolean;
/** 「自动编号」字段单元格类型 */
type IOpenAutoNumber = string;
/** 「电话号码」字段单元格类型 */
type IOpenPhone = string;
/** 「群字段」字段单元格类型 */
type IOpenGroupChat = {
    id: string;
    name: string;
    avatarUrl: string;
    en_name?: string;
    linkToken?: string;
};
/** 字段单值 */
type IOpenSingleCellValue = IOpenSingleSelect | IOpenUser | IOpenTimestamp | IOpenNumber | IOpenCheckbox | IOpenAutoNumber | IOpenPhone | IOpenLocation | IOpenAttachment | IOpenSegment | IOpenUrlSegment | IOpenGroupChat | IOpenLink;
type IOpenFormulaProxyCellValue = IOpenSingleCellValue[] | null;
type IOpenFormulaFuncCellValue = IOpenSegment[] | number[] | number | string;
/** 公式字段出值结果 */
type IOpenFormulaCellValue = IOpenFormulaProxyCellValue | IOpenFormulaFuncCellValue;
/** 单元格联合类型，使用时建议使用 checkers 断言这个类型的数据 */
type IOpenCellValue = null | IOpenSingleSelect | IOpenMultiSelect | IOpenUser[] | IOpenTimestamp | IOpenNumber | IOpenCheckbox | IOpenAutoNumber | IOpenPhone | IOpenLocation | IOpenAttachment[] | IOpenSegment[] | IOpenUrlSegment[] | IOpenLink | IOpenGroupChat[] | IOpenFormulaCellValue;

interface IEventCbCtx$1<DataType = unknown> {
    data: DataType;
}
declare enum WidgetBaseEvent {
    TableAdd = "TableAdd",
    TableDelete = "TableDelete",
    SelectionChange = "SelectionChange",
    PermissionChange = "PermissionChange",
    UploadStatusChange = "UploadStatusChange"
}
declare enum BridgeEvent {
    DataChange = "DataChange",
    ThemeChange = "ThemeChange"
}

interface Selection {
    baseId: string | null;
    tableId: string | null;
    viewId: string | null;
    fieldId: string | null;
    recordId: string | null;
}

/**
 * copy from bitable-sdk
 */
declare enum FieldType {
    NotSupport = 0,
    Text = 1,
    Number = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    DateTime = 5,
    Checkbox = 7,
    User = 11,
    Phone = 13,
    Url = 15,
    Attachment = 17,
    SingleLink = 18,
    Lookup = 19,
    Formula = 20,
    DuplexLink = 21,
    Location = 22,
    GroupChat = 23,
    Denied = 403,
    /**
     * 引用类型字段，前后端约定用10xx公共前缀开头
     */
    CreatedTime = 1001,
    ModifiedTime = 1002,
    CreatedUser = 1003,
    ModifiedUser = 1004,
    AutoNumber = 1005,
    Barcode = 99001,
    Progress = 99002,
    Currency = 99003,
    Rating = 99004
}
declare enum ViewType {
    NotSupport = 0,
    Grid = 1,
    Kanban = 2,
    Form = 3,
    Gallery = 4,
    Gantt = 5,
    Hierarchy = 6,
    Calendar = 7,
    WidgetView = 100
}
declare enum UploadFileTaskStatus {
    Pending = 1,
    Inflight = 2,
    Success = 3,
    Error = 4,
    Paused = 5
}
type IUploadFileTaskItem = {
    uploadedSize: number;
    name: string;
    status: UploadFileTaskStatus;
    progress: number;
    uuid: string;
    token?: string;
    size: number;
    file: File;
};
type IUploadFileTask = {
    list: Array<IUploadFileTaskItem>;
};
type IUploadEventData = {
    data: {
        id: string;
        tasks: IUploadFileTask;
    };
};
type Locale = 'zh-CN' | 'zh-TW' | 'zh-HK' | 'en-US' | 'ja-JP' | 'fr-FR' | 'hi-IN' | 'id-ID' | 'it-IT' | 'ko-KR' | 'pt-BR' | 'ru-RU' | 'th-TH' | 'vi-VN' | 'de-DE' | 'es-ES';
type Language = 'zh' | 'zh-TW' | 'zh-HK' | 'en' | 'ja' | 'fr' | 'hi' | 'id' | 'it' | 'ko' | 'pt' | 'ru' | 'th' | 'vi' | 'de' | 'es';
/** 定位字段输入方式 **/
declare enum ELocationInputType {
    ONLY_MOBILE = "ONLY_MOBILE",
    NOT_LIMIT = "NOT_LIMIT"
}
declare enum NumberFormatter {
    INTERGER = "0",
    DIGITAL_ROUNDED_1 = "0.0",
    DIGITAL_ROUNDED_2 = "0.00",
    DIGITAL_ROUNDED_3 = "0.000",
    DIGITAL_ROUNDED_4 = "0.0000",
    DIGITAL_THOUSANDS = "#,##0",
    DIGITAL_THOUSANDS_DECIMALS = "#,##0.00",
    PERCENTAGE_ROUNDED = "0%",
    PERCENTAGE = "0.00%"
}

declare abstract class ApiModule<C extends unknown[]> {
    context: C;
    /** 直接返回 string，不能引用 this，这里会被 register 从 prototype 上调用 */
    abstract getModuleName(): string;
    /**
     * @deprecated
     * 绑定 ApiModule 实例上下文并返回新实例
     *
     * @param context
     * @returns
     */
    withContext(context: C): this;
    /**
     * 获取 ApiModule 上下文
     * @returns
     */
    getContext(): C;
}

type BridgeModuleContext = never[];
declare enum ThemeModeType {
    LIGHT = "LIGHT",
    DARK = "DARK"
}
type ThemeModeCtx = {
    theme: ThemeModeType;
};
type GetBitableUrlOptions = Pick<Required<Selection>, 'tableId' | 'viewId'> & Pick<Selection, 'recordId' | 'fieldId'>;
interface ICommonBridgeModule {
    /** 读取持久化数据 */
    getData(): Promise<unknown>;
    /**
     * 写入持久化数据
     * @param data 可序列化的数据
     */
    setData(data: Record<string, unknown>): Promise<void>;
    /**
     * 生成 bitable 链接
     * @param options tableId, viewId 必选，recordId 可选。recordId 为空时打开表格，不为空时打开卡片。
     */
    getBitableUrl(options: GetBitableUrlOptions): Promise<string>;
    getUserId(): Promise<string>;
    getTheme(): Promise<ThemeModeType>;
    getLocale(): Promise<Locale>;
    getLanguage(): Promise<Language>;
    getTenantKey(): Promise<string>;
}
interface ICommonBridgeInner {
    registerBridgeEvent(event: BridgeEvent): Promise<void>;
    unregisterBridgeEvent(event: BridgeEvent): Promise<void>;
}
interface ICommonBridge extends ICommonBridgeModule {
    onThemeChange(callback: (ev: IEventCbCtx$1<ThemeModeCtx>) => void): () => void;
}

/**
 * FieldProperty
 */
/** Base */
type IBaseFieldProperty = object | null;
/** Text Field */
type ITextFieldProperty = IBaseFieldProperty;
/** Number Field */
interface INumberFieldProperty {
    formatter?: NumberFormatter;
}
/** DateTime Field */
type IDateTimeFieldProperty = IBaseFieldProperty;
type ICreatedTimeFieldProperty = IDateTimeFieldProperty;
type IModifiedTimeFieldProperty = IDateTimeFieldProperty;
/** Select Field */
interface ISelectFieldOption {
    id: string;
    name: string;
    color: number;
}
interface ISelectFieldProperty {
    options: ISelectFieldOption[];
}
/** Attachment Field */
type IAttachmentFieldProperty = IBaseFieldProperty;
/** Link Field */
interface ICommonLinkFieldProperty {
    tableId: string;
    multiple: boolean;
}
/** 单向关联 Field */
type ISingleLinkFieldProperty = ICommonLinkFieldProperty;
/** 双向关联 Field */
type IDuplexLinkFieldProperty = ICommonLinkFieldProperty;
/** Checkbox Field */
type ICheckboxProperty = IBaseFieldProperty;
/** User Field */
interface IUserFieldProperty {
    multiple?: boolean;
}
/** 创建用户 Field */
type ICreatedUserFieldProperty = IBaseFieldProperty;
/** 修改用户 Field */
type IModifiedUserFieldProperty = IBaseFieldProperty;
/** 查找应用 Field */
type ILookupFieldProperty = IBaseFieldProperty;
/** 公式 Field */
type IFormulaFieldProperty = IBaseFieldProperty;
/** 超链接 Field */
type IUrlFieldProperty = IBaseFieldProperty;
/** 号码 Field */
type IPhoneFieldProperty = IBaseFieldProperty;
/** 位置 Field */
interface ILocationFieldProperty {
    inputType: ELocationInputType;
}
/** 群聊 Field */
interface IGroupChatFieldProperty {
    multiple?: boolean;
}
/** 条码 Field */
type IBarCodeFieldProperty = IBaseFieldProperty;
/** 进度 Field */
type IProgressFieldProperty = IBaseFieldProperty;
/** 货币 Field */
type ICurrencyFieldProperty = IBaseFieldProperty;
/** 评分 Field */
type IRatingFieldProperty = IBaseFieldProperty;
/** Denied Field */
type IDeniedFieldProperty = IBaseFieldProperty;
/** 自动编号 Field */
type IAutoNumberFieldProperty = IBaseFieldProperty;
/** NotSupport Field */
type INotSupportFieldProperty = IBaseFieldProperty;
/** Field Meta */
interface IBaseFieldMeta {
    id: string;
    type: FieldType;
    name: string;
    property: IBaseFieldProperty;
}
interface ITextFieldMeta extends IBaseFieldMeta {
    type: FieldType.Text;
    property: ITextFieldProperty;
}
interface INumberFieldMeta extends IBaseFieldMeta {
    type: FieldType.Number;
    property: INumberFieldProperty;
}
interface IDateTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.DateTime;
    property: IDateTimeFieldProperty;
}
interface ICreatedTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.CreatedTime;
    property: ICreatedTimeFieldProperty;
}
interface IModifiedTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.ModifiedTime;
    property: IModifiedTimeFieldProperty;
}
interface ISelectFieldMeta extends IBaseFieldMeta {
    type: FieldType.SingleSelect | FieldType.MultiSelect;
    property: ISelectFieldProperty;
}
interface IAttachmentFieldMeta extends IBaseFieldMeta {
    type: FieldType.Attachment;
    property: IAttachmentFieldProperty;
}
interface ISingleLinkFieldMeta extends IBaseFieldMeta {
    type: FieldType.SingleLink;
    property: ISingleLinkFieldProperty;
}
interface IDuplexLinkFieldMeta extends IBaseFieldMeta {
    type: FieldType.DuplexLink;
    property: IDuplexLinkFieldProperty;
}
interface ICheckboxMeta extends IBaseFieldMeta {
    type: FieldType.Checkbox;
    property: ICheckboxProperty;
}
interface IUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.User;
    property: IUserFieldProperty;
}
interface ICreatedUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.CreatedUser;
    property: ICreatedUserFieldProperty;
}
interface IModifiedUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.ModifiedUser;
    property: IModifiedUserFieldProperty;
}
interface IFormulaFieldMeta extends IBaseFieldMeta {
    type: FieldType.Formula;
    property: IFormulaFieldProperty;
}
interface IUrlFieldMeta extends IBaseFieldMeta {
    type: FieldType.Url;
    property: IUrlFieldProperty;
}
interface IPhoneFieldMeta extends IBaseFieldMeta {
    type: FieldType.Phone;
    property: IPhoneFieldProperty;
}
interface ILocationFieldMeta extends IBaseFieldMeta {
    type: FieldType.Location;
    property: ILocationFieldProperty;
}
interface IGroupChatFieldMeta extends IBaseFieldMeta {
    type: FieldType.GroupChat;
    property: IGroupChatFieldProperty;
}
interface INotSupportFieldMeta extends IBaseFieldMeta {
    type: FieldType.NotSupport;
    property: INotSupportFieldProperty;
}
interface IAutoNumberFieldMeta extends IBaseFieldMeta {
    type: FieldType.AutoNumber;
    property: IAutoNumberFieldProperty;
}
interface IBarcodeFieldMeta extends IBaseFieldMeta {
    type: FieldType.Barcode;
    property: IBarCodeFieldProperty;
}
interface IProgressFieldMeta extends IBaseFieldMeta {
    type: FieldType.Progress;
    property: IProgressFieldProperty;
}
interface ICurrencyFieldMeta extends IBaseFieldMeta {
    type: FieldType.Currency;
    property: ICurrencyFieldProperty;
}
interface IRatingFieldMeta extends IBaseFieldMeta {
    type: FieldType.Rating;
    property: IRatingFieldProperty;
}
interface ILookupFieldMeta extends IBaseFieldMeta {
    type: FieldType.Lookup;
    property: ILookupFieldProperty;
}
interface IDeniedFieldMeta extends IBaseFieldMeta {
    type: FieldType.Denied;
    property: IDeniedFieldProperty;
}
type IFieldMeta = ITextFieldMeta | INumberFieldMeta | IDateTimeFieldMeta | ICreatedTimeFieldMeta | IModifiedTimeFieldMeta | ISelectFieldMeta | IAttachmentFieldMeta | ISingleLinkFieldMeta | IDuplexLinkFieldMeta | ICheckboxMeta | IUserFieldMeta | ICreatedUserFieldMeta | IModifiedUserFieldMeta | IFormulaFieldMeta | IUrlFieldMeta | IPhoneFieldMeta | ILocationFieldMeta | IGroupChatFieldMeta | IAutoNumberFieldMeta | IBarcodeFieldMeta | IProgressFieldMeta | ICurrencyFieldMeta | IRatingFieldMeta | ILookupFieldMeta | IDeniedFieldMeta | INotSupportFieldMeta;

/** Field 配置信息，用于 add/setField */
type ITextFieldConfig = Omit<ITextFieldMeta, 'id'>;
type INumberFieldConfig = Omit<INumberFieldMeta, 'id'>;
type IDateTimeFieldConfig = Omit<IDateTimeFieldMeta, 'id'>;
type ICreatedTimeFieldConfig = Omit<ICreatedTimeFieldMeta, 'id'>;
type IModifiedTimeFieldConfig = Omit<IModifiedTimeFieldMeta, 'id'>;
type ISelectFieldConfig = {
    name: string;
    type: FieldType.SingleSelect | FieldType.MultiSelect;
    property: {
        options: {
            name?: string;
            id?: string;
            color?: number;
        }[];
    };
};
type IAttachmentFieldConfig = Omit<IAttachmentFieldMeta, 'id'>;
type ISingleLinkFieldConfig = Omit<ISingleLinkFieldMeta, 'id'>;
type IDuplexLinkFieldConfig = Omit<IDuplexLinkFieldMeta, 'id'>;
type ICheckboxConfig = Omit<ICheckboxMeta, 'id'>;
type IUserFieldConfig = Omit<IUserFieldMeta, 'id'>;
type ICreatedUserFieldConfig = Omit<ICreatedUserFieldMeta, 'id'>;
type IModifiedUserFieldConfig = Omit<IModifiedUserFieldMeta, 'id'>;
type IFormulaFieldConfig = Omit<IFormulaFieldMeta, 'id'>;
type IUrlFieldConfig = Omit<IUrlFieldMeta, 'id'>;
type IPhoneFieldConfig = Omit<IPhoneFieldMeta, 'id'>;
type ILocationFieldConfig = Omit<ILocationFieldMeta, 'id'>;
type IGroupChatFieldConfig = Omit<IGroupChatFieldMeta, 'id'>;
type IAutoNumberFieldConfig = Omit<IAutoNumberFieldMeta, 'id'>;
type IBarcodeFieldConfig = Omit<IBarcodeFieldMeta, 'id'>;
type IProgressFieldConfig = Omit<IProgressFieldMeta, 'id'>;
type ICurrencyFieldConfig = Omit<ICurrencyFieldMeta, 'id'>;
type IRatingFieldConfig = Omit<IRatingFieldMeta, 'id'>;
type ILookupFieldConfig = Omit<ILookupFieldMeta, 'id'>;
type IDeniedFieldConfig = Omit<IDeniedFieldMeta, 'id'>;
type INotSupportFieldConfig = Omit<INotSupportFieldMeta, 'id'>;
type IAddFieldConfig = ITextFieldConfig | INumberFieldConfig | IDateTimeFieldConfig | ICreatedTimeFieldConfig | IModifiedTimeFieldConfig | ISelectFieldConfig | IAttachmentFieldConfig | ISingleLinkFieldConfig | IDuplexLinkFieldConfig | ICheckboxConfig | IUserFieldConfig | ICreatedUserFieldConfig | IModifiedUserFieldConfig | IFormulaFieldConfig | IUrlFieldConfig | IPhoneFieldConfig | ILocationFieldConfig | IGroupChatFieldConfig | IAutoNumberFieldConfig | IBarcodeFieldConfig | IProgressFieldConfig | ICurrencyFieldConfig | IRatingFieldConfig | ILookupFieldConfig | IDeniedFieldConfig | INotSupportFieldConfig;
type ISetFieldConfig = Omit<IAddFieldConfig, 'type'>;
type IFieldId = string;
type IFieldRes = IFieldId;

type IRecordValues = {
    fields: {
        [fieldId: string]: IOpenCellValue;
    };
};
type RecordId = string;
type IRecordRes = RecordId;

type IBaseViewProperty = object;
interface IBaseViewMeta {
    id: string;
    name: string;
    type: ViewType;
    property: IBaseViewProperty;
}
/** 表格视图配置 */
interface IGridViewProperty extends IBaseViewProperty {
    hierarchyConfig: {
        fieldId: string | undefined;
    };
}
/** 看板视图层级配置 */
type IKanbanViewProperty = IBaseViewProperty;
/** 表单视图层级配置 */
type IFormViewProperty = IBaseViewProperty;
/** 画册视图层级配置 */
type IGalleryViewProperty = IBaseViewProperty;
/** 甘特视图层级配置 */
type IGanttViewProperty = IBaseViewProperty;
/** 层级视图层级配置 */
type IHierarchyViewProperty = IBaseViewProperty;
/** 日历视图层级配置 */
type ICalendarViewProperty = IBaseViewProperty;
/** 插件视图层级配置 */
type IWidgetViewProperty = IBaseViewProperty;
interface IGridViewMeta extends IBaseViewMeta {
    property: IGridViewProperty;
}
interface IKanbanViewMeta extends IBaseViewMeta {
    property: IKanbanViewProperty;
}
interface IFormViewMeta extends IBaseViewMeta {
    property: IFormViewProperty;
}
interface IGalleryViewMeta extends IBaseViewMeta {
    property: IGalleryViewProperty;
}
interface IGanttViewMeta extends IBaseViewMeta {
    property: IGanttViewProperty;
}
interface IHierarchyViewMeta extends IBaseViewMeta {
    property: IHierarchyViewProperty;
}
interface ICalendarViewMeta extends IBaseViewMeta {
    property: ICalendarViewProperty;
}
interface IWidgetViewMeta extends IBaseViewMeta {
    property: IWidgetViewProperty;
}
type IViewMeta = IGridViewMeta | IKanbanViewMeta | IFormViewMeta | IGalleryViewMeta | IGanttViewMeta | IHierarchyViewMeta | ICalendarViewMeta | IWidgetViewMeta;
interface IFieldValue {
    record_id: string;
    value: IOpenCellValue;
}
interface IUndefinedFieldValue {
    record_id: undefined;
    value: undefined;
}
interface IWidgetFieldModule {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取字段类型 */
    getType(): Promise<FieldType>;
    /** 获取公式代理列类型 */
    getProxyType(): Promise<FieldType | void>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(recordId: string): Promise<string>;
    /** 获取当前 field meta 信息 */
    getMeta(): Promise<IFieldMeta>;
    /**
     * 获取整列 cellValue
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     */
    getFieldValueList(filter?: Formula, sort?: Sort): Promise<(IFieldValue | IUndefinedFieldValue)[]>;
}
interface IWidgetField extends IWidgetFieldModule {
    id: string;
    tableId: string;
}
interface IWidgetViewModule {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取视图类型 */
    getType(): Promise<ViewType>;
    /** 获取视图元数据 */
    getMeta(): Promise<IViewMeta>;
    /** 获取字段列表（有序） */
    getFieldMetaList(): Promise<IFieldMeta[]>;
    /** 获取记录 ID 列表 */
    getVisibleRecordIdList(): Promise<(string | undefined)[]>;
    /** 获取可见字段 ID 列表 */
    getVisibleFieldIdList(): Promise<string[]>;
    /** 获取指定记录的子记录 id 列表, undefined 则表示该记录无子记录 */
    getChildRecordIdList(parentRecordId: string): Promise<RecordId[] | undefined>;
}
interface IWidgetView extends IWidgetViewModule {
    id: string;
    tableId: string;
}
interface IWidgetTableModule {
    /** 获取表名 */
    getName(): Promise<string>;
    /** 添加字段 */
    addField(fieldConfig: IAddFieldConfig): Promise<IFieldRes>;
    /** 删除字段 */
    deleteField(fieldId: string): Promise<boolean>;
    /** 修改字段 */
    setField(fieldId: string, fieldConfig: ISetFieldConfig): Promise<IFieldRes>;
    /** 获取某个 field 元信息 */
    getFieldMetaById(fieldId: string): Promise<IFieldMeta>;
    /** 获取所有 field 元信息 */
    getFieldMetaList(): Promise<IFieldMeta[]>;
    /** 字段是否存在 */
    isFieldExist(fieldId: string): Promise<boolean>;
    /** 获取某个视图元信息 */
    getViewMetaById(viewId: string): Promise<IViewMeta>;
    /** 获取所有 视图 元信息 */
    getViewMetaList(): Promise<IViewMeta[]>;
    /** 视图是否存在 */
    isViewExist(viewId: string): Promise<boolean>;
    /** 通过 recordId 获取指定记录 */
    getRecordById(recordId: string): Promise<IRecordValues>;
    /**
     * 获取表中所有记录 Id
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     * @returns
     */
    getRecordIdList(filter?: Formula, sort?: Sort): Promise<(string | undefined)[]>;
    /**
     * 获取单元格值
     * @param fieldId
     * @param recordId
     */
    getCellValue(fieldId: string, recordId: string): Promise<IOpenCellValue>;
    /**
     * 设置单元格的值
     * @param fieldId
     * @param recordId
     * @param cellValue
     */
    setCellValue<T extends IOpenCellValue = IOpenCellValue>(fieldId: string, recordId: string, cellValue: T): Promise<boolean>;
    /**
     * 获取 attachment 的 url
     * @param token
     * @param fieldId
     * @param recordId
     */
    getAttachmentUrl(token: string, fieldId?: string, recordId?: string): Promise<string>;
    /**
     * 批量获取指定单元格中的附件 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellAttachmentUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 批量获取指定单元格中的附件缩略图 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellThumbnailUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 增加一条记录
     * @param recordValues
     */
    addRecord(recordValues?: IRecordValues): Promise<IRecordRes>;
    /**
     * 修改一条记录
     * @param recordId
     * @param recordValues
     */
    setRecord(recordId: string, recordValues?: IRecordValues): Promise<IRecordRes>;
    /**
     * 删除一条记录
     * @param recordId
     */
    deleteRecord(recordId: string): Promise<boolean>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(fieldId: string, recordId: string): Promise<string>;
}
interface IWidgetTable extends IWidgetTableModule {
    id: string;
    /** 获取字段列表 */
    getFieldList(): Promise<IWidgetField[]>;
    /**
     * @deprecated The method will be removed, use getFieldMetaList instead!
     */
    getFieldIdList(): Promise<string[]>;
    /**
     * 根据字段 id 获取字段
     * @param fieldId
     */
    getFieldById(fieldId: string): Promise<IWidgetField>;
    /**
     * 根据字段名称获取字段
     * @param name
     */
    getFieldByName(name: string): Promise<IWidgetField>;
    /**
     * 监听 Field 添加事件
     * @param callback 回调函数
     */
    onFieldAdd(callback: (ev: IEventCbCtx$1) => void): () => void;
    /**
     * 监听 Field 删除事件
     * @param callback 回调函数
     */
    onFieldDelete(callback: (ev: IEventCbCtx$1) => void): () => void;
    /**
     * 监听 Field 修改事件
     * @param callback 回调函数
     */
    onFieldModify(callback: (ev: IEventCbCtx$1) => void): () => void;
    /**
     * 监听 Record 添加事件
     * @param callback 回调函数
     */
    onRecordAdd(callback: (ev: IEventCbCtx$1<[recordId: string]>) => void): () => void;
    /**
     * 监听 Record 删除事件
     * @param callback 回调函数
     */
    onRecordDelete(callback: (ev: IEventCbCtx$1<[recordId: string]>) => void): () => void;
    /**
     * 监听 Record 修改事件
     * @param callback 回调函数
     */
    onRecordModify(callback: (ev: IEventCbCtx$1<{
        recordId: string;
        fieldIds: string[];
    }>) => void): () => void;
    /**
     * 根据字段 id 获取视图
     * @param viewId
     */
    getViewById(viewId: string): Promise<IWidgetView>;
}

declare enum PermissionEntity {
    Base = "Base",
    Table = "Table",
    Record = "Record",
    Field = "Field",
    Cell = "Cell"
}
declare enum OperationType {
    Visible = "visible",
    Editable = "editable",
    Addable = "addable",
    Deletable = "deletable",
    Copyable = "copyable",
    Movable = "movable",
    Printable = "printable",
    Manageable = "manageable",
    Submittable = "submittable"
}
type BaseOperation = OperationType.Editable | OperationType.Manageable | OperationType.Copyable | OperationType.Printable;
type TableOperation = OperationType.Addable | OperationType.Deletable | OperationType.Editable | OperationType.Visible | OperationType.Movable | OperationType.Copyable;
type RecordOperation = TableOperation;
type FieldOperation = TableOperation | OperationType.Submittable;
type CellOperation = TableOperation;
interface BasePermissionParams {
    entity: PermissionEntity.Base;
    type: BaseOperation;
}
interface TablePermissionParams {
    entity: PermissionEntity.Table;
    param: {
        tableId?: string;
    };
    type: TableOperation;
}
interface RecordPermissionParams {
    entity: PermissionEntity.Record;
    param: {
        tableId: string;
        recordId?: string;
    };
    type: RecordOperation;
}
interface FieldPermissionParams {
    entity: PermissionEntity.Field;
    param: {
        tableId: string;
        fieldId?: string;
    };
    type: FieldOperation;
}
interface CellPermissionParams {
    entity: PermissionEntity.Cell;
    param: {
        tableId: string;
        recordId?: string;
        fieldId?: string;
    };
    type: CellOperation;
}
type GetPermissionParams = BasePermissionParams | TablePermissionParams | RecordPermissionParams | FieldPermissionParams | CellPermissionParams;

type WidgetBaseContext = never[];
type TableMeta = {
    id: string;
    name: string;
};
interface ICommonWidgetBaseModule {
    /** 读取当前 table id, field id(仅 itemview 会返回), recordId(仅 itemview 会返回) */
    getSelection(): Promise<Selection>;
    /** 获取当前 base 下所有表元信息 */
    getTableMetaList(): Promise<TableMeta[]>;
    /**
     * 获取 Base、Table、Field、Record、Cell 等不同实体的权限
     */
    getPermission(params: GetPermissionParams): Promise<boolean>;
    /**
     * @deprecated 请使用 getPermission 方法
     * 获取当前 base 的权限信息
     * @param type 权限类型，目前支持管理/编辑/复制/打印权限的判断
     */
    getBasePermission(type: BaseOperation): Promise<boolean>;
    /**
     * 是否在编辑模式
     */
    isEditable(): Promise<boolean>;
    /**
     * @deprecated 推荐使用 batchUploadFile 方法
     * 上传文件，返回上传任务的 taskId
     * @param file
     * @return taskId
     */
    uploadFile(file: File | FileList): Promise<string>;
    /**
     * 批量上传文件，按序返回每个文件对应的 fileToken 列表
     * @param {(File[] | FileList)} files
     * @return {Promise<string[]>} fileTokens
     */
    batchUploadFile(file: File[] | FileList): Promise<string[]>;
}
interface ICommonWidgetBaseInner {
    /**
     * 当前表是否存在
     */
    isTableExist(tableId: string): Promise<boolean>;
    /**
     * 通过表名获取表 id
     * @param name
     */
    getTableIdByName(name: string): Promise<string>;
    /**
     * 注册 base 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerBaseEvent(event: WidgetBaseEvent): Promise<void>;
    /**
     * 取消注册 base 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterBaseEvent(event: WidgetBaseEvent): Promise<void>;
}
interface ICommonWidgetBase extends ICommonWidgetBaseModule {
    /** 获取当前 base 下所有表 */
    getTableList(): Promise<IWidgetTable[]>;
    /**
     * 通过表 id 获取表
     * @param tableId
     */
    getTableById(tableId: string): Promise<IWidgetTable>;
    /**
     * 通过表名获取表
     * @param name
     */
    getTableByName(name: string): Promise<IWidgetTable>;
    /**
     * 监听 Table 添加事件
     * @param callback 回调函数
     */
    onTableAdd(callback: (e: IEventCbCtx$1) => void): () => void;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableDelete(callback: (e: IEventCbCtx$1) => void): () => void;
    /**
     * 监听选中改变事件
     * @param callback 回调函数，参数为当前选中的 base/table/field/record ID 集合
     */
    onSelectionChange(callback: (e: IEventCbCtx$1<Selection>) => void): () => void;
    /**
     * 监听权限变化
     * @param callback 回调函数
     */
    onPermissionChange(callback: () => void): () => void;
    /**
     * 监听上传文件的状态变化
     * @param callback
     */
    onUploadStatusChange(callback: (data: IUploadEventData) => void): () => void;
}

interface IEventCbCtx<DataType = unknown> {
    data: DataType;
}
interface IEventManager<T> {
    /**
     * 监听事件
     * @param event
     * @param callback
     */
    on<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): void;
    /**
     * 移除事件监听
     * @param event
     * @param callback
     */
    off<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): void;
    /**
     * 监听事件并返回取消监听函数
     * @param event
     * @param callback
     */
    bind<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): () => void;
}
declare class EventRefCount {
    private client;
    constructor(client: any);
    static getInstance(client: any): void;
    protected map: Map<string, number>;
    /**
     * 引用计数为 0 时，调用 onRegister 创建注册事件
     * @param eventKey
     * @param onRegister
     * @returns
     */
    add<Data = unknown>(eventKey: string, callback: (ev: IEventCbCtx<Data>) => void, onRegister?: () => void): number;
    /**
     * 引用计数为 1 时，调用 onUnregister 取消注册事件
     * @param eventKey
     * @param onUnregister
     * @returns
     */
    del<Data = unknown>(eventKey: string, callback: (ev: IEventCbCtx<Data>) => void, onUnregister?: () => void): number;
}

interface ApiClient {
    subscribeEvent(name: string, handler: (...args: unknown[]) => unknown): void;
    unsubscribeEvent(name: string, handler: (...args: unknown[]) => unknown): void;
    invokeApi<R = unknown>(name: string, args: unknown, options?: any): Promise<R>;
}
declare abstract class ClientApiModule<C extends unknown[]> extends ApiModule<C> {
    protected readonly client: ApiClient;
    protected readonly eventRefCount: EventRefCount;
    constructor(client: ApiClient);
}

declare class CommonWidgetBaseModule extends ClientApiModule<WidgetBaseContext> implements ICommonWidgetBase, ICommonWidgetBaseInner, IEventManager<WidgetBaseEvent> {
    private readonly tableMap;
    /** 用于同步读取可打印权限 */
    private _isPrintable;
    constructor(client: any);
    getModuleName(): string;
    /** 协同 Printable 权限状态 */
    private refreshPrintableState;
    /** 无打印权限时将打印内容设置为空 */
    private checkPrintPermissionDefault;
    /**
     * 返回 WidgetTable，并且维护 tableMap，保证 table 单例化。
     * @param tableId
     * @returns
     */
    private getChildWidgetTable;
    getTableList(): Promise<IWidgetTable[]>;
    getTableById(tableId: string): Promise<IWidgetTable>;
    getTableByName(name: string): Promise<IWidgetTable>;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableAdd(callback: (e: IEventCbCtx) => void): () => void;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableDelete(callback: (e: IEventCbCtx) => void): () => void;
    /**
     * 监听选中改变事件
     * @param callback 回调函数，data 为当前选中的 base/table/field/record ID 集合
     */
    onSelectionChange(callback: (e: IEventCbCtx<Selection>) => void): () => void;
    onPermissionChange(callback: () => void): () => void;
    onUploadStatusChange(callback: (data: IUploadEventData) => void): () => void;
    on<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    off<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    bind<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): () => void;
    isTableExist(tableId: string): Promise<boolean>;
    /**
     * @deprecated The method will be removed, use getTableMetaList instead!
     */
    getTableIdList(): Promise<string[]>;
    getTableMetaList(): Promise<TableMeta[]>;
    getTableIdByName(name: string): Promise<string>;
    isEditable(): Promise<boolean>;
    getBasePermission(type: BaseOperation): Promise<boolean>;
    getPermission(params: GetPermissionParams): Promise<boolean>;
    registerBaseEvent(event: WidgetBaseEvent): Promise<void>;
    unregisterBaseEvent(event: WidgetBaseEvent): Promise<void>;
    getSelection(): Promise<Selection>;
    uploadFile(file: File | FileList): Promise<string>;
    batchUploadFile(file: File[] | FileList): Promise<string[]>;
}

declare class CommonBridgeModule extends ClientApiModule<BridgeModuleContext> implements ICommonBridge, ICommonBridgeInner, IEventManager<BridgeEvent> {
    getModuleName(): string;
    on<Data = unknown>(event: BridgeEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    off<Data = unknown>(event: BridgeEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    bind<Data = unknown>(event: BridgeEvent, callback: (ev: IEventCbCtx<Data>) => void): () => void;
    getBitableUrl(options: GetBitableUrlOptions): Promise<string>;
    getData(): Promise<unknown>;
    setData(data: Record<string, unknown>): Promise<void>;
    registerBridgeEvent(event: BridgeEvent): Promise<void>;
    unregisterBridgeEvent(event: BridgeEvent): Promise<void>;
    getUserId(): Promise<string>;
    getTheme(): Promise<ThemeModeType>;
    /**
     * 监听外观变化
     * @param callback 回调函数
     */
    onThemeChange(callback: (ev: IEventCbCtx<ThemeModeCtx>) => void): () => void;
    getLocale(): Promise<Locale>;
    getLanguage(): Promise<Language>;
    getTenantKey(): Promise<string>;
    uploadFile(file: File | FileList): Promise<string[]>;
}

declare class WidgetBaseModule extends CommonWidgetBaseModule implements IWidgetBaseModule {
    getPersonalBaseToken(): Promise<string>;
}

declare class BridgeModule extends CommonBridgeModule implements IBridgeModule {
}

export { AddFieldUnknownError, AddRecordUnknownError, ApiModule$1 as ApiModule, BaseOperation$1 as BaseOperation, BasePermissionParams$1 as BasePermissionParams, BitableTransferableErrorSign, BridgeEvent$1 as BridgeEvent, BridgeModule, BridgeModuleContext$1 as BridgeModuleContext, CellOperation$1 as CellOperation, CellPermissionDeniedError, CellPermissionParams$1 as CellPermissionParams, CoreCommonDetailCode, CoreScopeCode, CoreScopeCodeType, CurrencyFormatter, DateFormatter, DeleteFieldUnknownError, DeleteRecordUnknownError, DetailCode, DetailMessage, ELocationInputType$1 as ELocationInputType, ErrorScopeCodeType, FieldNotFoundError, FieldOperation$1 as FieldOperation, FieldPermissionDeniedError, FieldPermissionParams$1 as FieldPermissionParams, FieldType$1 as FieldType, Formula$1 as Formula, GetBitableUrlOptions$1 as GetBitableUrlOptions, GetPermissionParams$1 as GetPermissionParams, HostMeta, IAddFieldConfig$1 as IAddFieldConfig, IAttachmentFieldConfig$1 as IAttachmentFieldConfig, IAttachmentFieldMeta$1 as IAttachmentFieldMeta, IAttachmentFieldProperty$1 as IAttachmentFieldProperty, IAutoNumberFieldConfig$1 as IAutoNumberFieldConfig, IAutoNumberFieldMeta$1 as IAutoNumberFieldMeta, IAutoNumberFieldProperty$1 as IAutoNumberFieldProperty, IBarCodeFieldProperty$1 as IBarCodeFieldProperty, IBarcodeFieldConfig$1 as IBarcodeFieldConfig, IBarcodeFieldMeta$1 as IBarcodeFieldMeta, IBaseFieldMeta$1 as IBaseFieldMeta, IBaseFieldProperty$1 as IBaseFieldProperty, IBaseViewMeta$1 as IBaseViewMeta, IBaseViewProperty$1 as IBaseViewProperty, IBridge, IBridgeInner, IBridgeModule, ICalendarViewMeta$1 as ICalendarViewMeta, ICalendarViewProperty$1 as ICalendarViewProperty, ICheckboxConfig$1 as ICheckboxConfig, ICheckboxMeta$1 as ICheckboxMeta, ICheckboxProperty$1 as ICheckboxProperty, ICommonBridge$1 as ICommonBridge, ICommonBridgeInner$1 as ICommonBridgeInner, ICommonBridgeModule$1 as ICommonBridgeModule, ICommonLinkFieldProperty$1 as ICommonLinkFieldProperty, ICommonWidgetBase$1 as ICommonWidgetBase, ICommonWidgetBaseInner$1 as ICommonWidgetBaseInner, ICommonWidgetBaseModule$1 as ICommonWidgetBaseModule, ICreatedTimeFieldConfig$1 as ICreatedTimeFieldConfig, ICreatedTimeFieldMeta$1 as ICreatedTimeFieldMeta, ICreatedTimeFieldProperty$1 as ICreatedTimeFieldProperty, ICreatedUserFieldConfig$1 as ICreatedUserFieldConfig, ICreatedUserFieldMeta$1 as ICreatedUserFieldMeta, ICreatedUserFieldProperty$1 as ICreatedUserFieldProperty, ICurrencyFieldConfig$1 as ICurrencyFieldConfig, ICurrencyFieldMeta$1 as ICurrencyFieldMeta, ICurrencyFieldProperty$1 as ICurrencyFieldProperty, IDateTimeFieldConfig$1 as IDateTimeFieldConfig, IDateTimeFieldMeta$1 as IDateTimeFieldMeta, IDateTimeFieldProperty$1 as IDateTimeFieldProperty, IDeniedFieldConfig$1 as IDeniedFieldConfig, IDeniedFieldMeta$1 as IDeniedFieldMeta, IDeniedFieldProperty$1 as IDeniedFieldProperty, IDuplexLinkFieldConfig$1 as IDuplexLinkFieldConfig, IDuplexLinkFieldMeta$1 as IDuplexLinkFieldMeta, IDuplexLinkFieldProperty$1 as IDuplexLinkFieldProperty, IEventCbCtx$2 as IEventCbCtx, IFieldId$1 as IFieldId, IFieldMeta$1 as IFieldMeta, IFieldProperty, IFieldRes$1 as IFieldRes, IFormViewMeta$1 as IFormViewMeta, IFormViewProperty$1 as IFormViewProperty, IFormulaFieldConfig$1 as IFormulaFieldConfig, IFormulaFieldMeta$1 as IFormulaFieldMeta, IFormulaFieldProperty$1 as IFormulaFieldProperty, IGalleryViewMeta$1 as IGalleryViewMeta, IGalleryViewProperty$1 as IGalleryViewProperty, IGanttViewMeta$1 as IGanttViewMeta, IGanttViewProperty$1 as IGanttViewProperty, IGridViewMeta$1 as IGridViewMeta, IGridViewProperty$1 as IGridViewProperty, IGroupChatFieldConfig$1 as IGroupChatFieldConfig, IGroupChatFieldMeta$1 as IGroupChatFieldMeta, IGroupChatFieldProperty$1 as IGroupChatFieldProperty, IHierarchyViewMeta$1 as IHierarchyViewMeta, IHierarchyViewProperty$1 as IHierarchyViewProperty, IKanbanViewMeta$1 as IKanbanViewMeta, IKanbanViewProperty$1 as IKanbanViewProperty, ILocationFieldConfig$1 as ILocationFieldConfig, ILocationFieldMeta$1 as ILocationFieldMeta, ILocationFieldProperty$1 as ILocationFieldProperty, ILookupFieldConfig$1 as ILookupFieldConfig, ILookupFieldMeta$1 as ILookupFieldMeta, ILookupFieldProperty$1 as ILookupFieldProperty, IModifiedTimeFieldConfig$1 as IModifiedTimeFieldConfig, IModifiedTimeFieldMeta$1 as IModifiedTimeFieldMeta, IModifiedTimeFieldProperty$1 as IModifiedTimeFieldProperty, IModifiedUserFieldConfig$1 as IModifiedUserFieldConfig, IModifiedUserFieldMeta$1 as IModifiedUserFieldMeta, IModifiedUserFieldProperty$1 as IModifiedUserFieldProperty, INotSupportFieldConfig$1 as INotSupportFieldConfig, INotSupportFieldMeta$1 as INotSupportFieldMeta, INotSupportFieldProperty$1 as INotSupportFieldProperty, INumberFieldConfig$1 as INumberFieldConfig, INumberFieldMeta$1 as INumberFieldMeta, INumberFieldProperty$1 as INumberFieldProperty, IOpenAttachment$1 as IOpenAttachment, IOpenAutoNumber$1 as IOpenAutoNumber, IOpenCellValue$1 as IOpenCellValue, IOpenCheckbox$1 as IOpenCheckbox, IOpenDocumentMentionSegment$1 as IOpenDocumentMentionSegment, IOpenFormulaCellValue$1 as IOpenFormulaCellValue, IOpenFormulaFuncCellValue$1 as IOpenFormulaFuncCellValue, IOpenFormulaProxyCellValue$1 as IOpenFormulaProxyCellValue, IOpenGroupChat$1 as IOpenGroupChat, IOpenLink$1 as IOpenLink, IOpenLocation$1 as IOpenLocation, IOpenMentionSegment$1 as IOpenMentionSegment, IOpenMultiSelect$1 as IOpenMultiSelect, IOpenNumber$1 as IOpenNumber, IOpenPhone$1 as IOpenPhone, IOpenSegment$1 as IOpenSegment, IOpenSegmentType$1 as IOpenSegmentType, IOpenSingleCellValue$1 as IOpenSingleCellValue, IOpenSingleSelect$1 as IOpenSingleSelect, IOpenTextSegment$1 as IOpenTextSegment, IOpenTimestamp$1 as IOpenTimestamp, IOpenUrlSegment$1 as IOpenUrlSegment, IOpenUser$1 as IOpenUser, IOpenUserMentionSegment$1 as IOpenUserMentionSegment, IPhoneFieldConfig$1 as IPhoneFieldConfig, IPhoneFieldMeta$1 as IPhoneFieldMeta, IPhoneFieldProperty$1 as IPhoneFieldProperty, IPrivateModule, IProgressFieldConfig$1 as IProgressFieldConfig, IProgressFieldMeta$1 as IProgressFieldMeta, IProgressFieldProperty$1 as IProgressFieldProperty, IRatingFieldConfig$1 as IRatingFieldConfig, IRatingFieldMeta$1 as IRatingFieldMeta, IRatingFieldProperty$1 as IRatingFieldProperty, IRecordRes$1 as IRecordRes, IRecordValues$1 as IRecordValues, IRecordsValues, ISelectFieldConfig$1 as ISelectFieldConfig, ISelectFieldMeta$1 as ISelectFieldMeta, ISelectFieldOption$1 as ISelectFieldOption, ISelectFieldProperty$1 as ISelectFieldProperty, ISetFieldConfig$1 as ISetFieldConfig, ISingleLinkFieldConfig$1 as ISingleLinkFieldConfig, ISingleLinkFieldMeta$1 as ISingleLinkFieldMeta, ISingleLinkFieldProperty$1 as ISingleLinkFieldProperty, ITextFieldConfig$1 as ITextFieldConfig, ITextFieldMeta$1 as ITextFieldMeta, ITextFieldProperty$1 as ITextFieldProperty, IUploadEventData$1 as IUploadEventData, IUploadFileTask$1 as IUploadFileTask, IUploadFileTaskItem$1 as IUploadFileTaskItem, IUrlFieldConfig$1 as IUrlFieldConfig, IUrlFieldMeta$1 as IUrlFieldMeta, IUrlFieldProperty$1 as IUrlFieldProperty, IUserFieldConfig$1 as IUserFieldConfig, IUserFieldMeta$1 as IUserFieldMeta, IUserFieldProperty$1 as IUserFieldProperty, IViewMeta$1 as IViewMeta, IWidgetBase, IWidgetBaseInner, IWidgetBaseModule, IWidgetField$1 as IWidgetField, IWidgetFieldInner, IWidgetFieldModule$1 as IWidgetFieldModule, IWidgetTable$1 as IWidgetTable, IWidgetTableInner, IWidgetTableModule$1 as IWidgetTableModule, IWidgetView$1 as IWidgetView, IWidgetViewInner, IWidgetViewMeta$1 as IWidgetViewMeta, IWidgetViewModule$1 as IWidgetViewModule, IWidgetViewProperty$1 as IWidgetViewProperty, Language$1 as Language, Locale$1 as Locale, NumberFormatter$1 as NumberFormatter, OpenCommonDetailCode, OpenError, OpenErrorCode, OpenMentionType$1 as OpenMentionType, OpenMentionTypeMap$1 as OpenMentionTypeMap, OpenScopeCode, OpenScopeCodeType, OperationType$1 as OperationType, PermissionEntity$1 as PermissionEntity, RecordId$1 as RecordId, RecordNotFoundError, RecordOperation$1 as RecordOperation, RecordPermissionDeniedError, RecordPermissionParams$1 as RecordPermissionParams, Selection$1 as Selection, SetCellUnknownError, SetFieldUnknownError, SetRecordUnknownError, Sort$1 as Sort, TableMeta$1 as TableMeta, TableNotFoundError, TableNotLoadedError, TableOperation$1 as TableOperation, TablePermissionDeniedError, TablePermissionParams$1 as TablePermissionParams, ThemeModeCtx$1 as ThemeModeCtx, ThemeModeType$1 as ThemeModeType, TransferType, TransferableError, UnknownScopeCode, UploadFileTaskStatus$1 as UploadFileTaskStatus, ViewNotFoundError, ViewPermissionDeniedError, ViewType$1 as ViewType, WidgetBaseContext$1 as WidgetBaseContext, WidgetBaseEvent$1 as WidgetBaseEvent, WidgetBaseModule, WidgetFieldContext, WidgetFieldEvent, WidgetTableContext, WidgetTableEvent, WidgetViewContext, baseEventPrefix, bitable, bridgeEventPrefix, cell_checkers as checkers, createApiKey, createCompatibleApiKey, fieldEventPrefix, getBaseEventKey, getBridgeEventKey, getFieldEventKey, getNeedTransformApiKeyMap, getTableEventKey, tableEventPrefix };
